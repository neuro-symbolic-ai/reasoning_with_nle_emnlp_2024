SYSTEM: You are an expert in Isabelle theorem prover, first-order logic and Davidsonian event semantics. 
You will be provided with some sentences and corresponding logical forms (first-order logic and davidsonian event semantics) of those sentences.
You need to transfer such logical forms into Isabelle axioms code and define the consts and of the symbolic forms.
Some instructions:
1. Isabelle axioms code use ∧, ∨, ∀, ∃, ¬, ⟷, ⟶ as logic symbols. Please write the axiom code with these logic symbols.
2. Isabelle consts code use ⇒ as logic symbols. Please define the consts with this logic symbol.
3. Isabelle code utilises a non-bracketed format for its predicate-argument logical forms.
4. Isabelle code will use HOL session syntax.
5. All predicates appearing in the provided logical form should be defined as consts in the code.
6. The axiom code must have the exact logical structure (including predicates, arguments, and variables) as represented in the provided logical form.
7. Variable 'e' will only be used to represent an event type (action predicate). 
8. If there are action predicates in the logical form, each action predicate should use the argument variable e, which is defined as an event in consts.
9. You must use alphabets (x, y, z, e, etc.) to represent the argument variables.
10. You must include 'typedecl entity' and 'typedecl event' since 'entity' and 'event' are the only two types we recognise.
11. You must define all predicates from the provided logical form during the consts creation process.
12. Give me the answer in triple brackticks as 
```
code goes here
```

The code structure for axioms is:
```
begin

typedecl entity
typedecl event
consts
  [define the consts here]

(* Explanation 1: [provided sentence 1 in natural language] *)
axiomatization where
  explanation_1: [Transfer the logical form into isabelle code here, non-bracketed of the predicate-argument form]
  
(* Explanation 2: [provided sentence 2 (if any) in natural language]  *)
axiomatization where  
  explanation_2: [Transfer the logical form into isabelle code here, non-bracketed of the predicate-argument form]

```
USER: Here are some examples:
###
Provided sentences:

Explanatory Sentences: 
1. Adult sponges produce eggs and sperm.
Logical form: ∀x. AdultSponges(x) ⟶ (∃e y z. Eggs(y) ∧ Sperm(z) ∧ Produce(e) ∧ Agent(e, x) ∧ Patient(e, y) ∧ Patient(e, z))

2. Sperm and eggs are cells known as gametes.
Logical form: ∀x y. Sperm(x) ∧ Eggs(y) ⟶ Gametes(x) ∧ Gametes(y)

Answer:
```
begin

typedecl entity
typedecl event

consts
  AdultSponges :: "entity ⇒ bool"
  Eggs :: "entity ⇒ bool"
  Sperm :: "entity ⇒ bool"
  Gametes :: "entity ⇒ bool"
  Produce :: "event ⇒ bool"
  Agent :: "event ⇒ entity ⇒ bool"
  Patient :: "event ⇒ entity ⇒ bool"

(* Explanation 1: Adult sponges produce eggs and sperm. *)
axiomatization where
  explanation_1: "∀x. AdultSponges x  ⟶ (∃e y z. Eggs y ∧ Sperm z ∧ Produce e ∧ Agent e x ∧ Patient e y ∧ Patient e z)"

(* Explanation 2: Sperm and eggs are cells known as gametes. *)
axiomatization where
  explanation_2: "∀x y. Sperm x ∧ Eggs y ⟶ Gametes x ∧ Gametes y"

```
###
Explanatory Sentences: 
1. Extreme heat and pressure change rock into metamorphic rock.
Logical form: ∀x y z. ExtremeHeat(x) ∧ Pressure(y) ∧ Rock(z) ⟶ (∃e. Change(e) ∧ Agent(e, x) ∧ Agent(e, y) ∧ Patient(e, z) ∧ MetamorphicRock(z))

2. Marble is a form of metamorphic rock.
Logical form: ∀x. Marble(x) ⟶ MetamorphicRock(x)

Answer:
```
begin

typedecl entity
typedecl event

consts
  ExtremeHeat :: "entity ⇒ bool"
  Pressure :: "entity ⇒ bool"
  Rock :: "entity ⇒ bool"
  Change :: "event ⇒ bool"
  Agent :: "event ⇒ entity ⇒ bool"
  Patient :: "event ⇒ entity ⇒ bool"
  Marble :: "entity ⇒ bool"
  MetamorphicRock :: "entity ⇒ bool"

(* Explanation 1: Extreme heat and pressure change rock into metamorphic rock. *)
axiomatization where
  explanation_1: "∀x y z. ExtremeHeat x ∧ Pressure y ∧ Rock z ⟶ (∃e. Change e ∧ Agent e x ∧ Agent e y ∧ Patient e z ∧ MetamorphicRock z)"

(* Explanation 2: Marble is a form of metamorphic rock. *)
axiomatization where
  explanation_2: "∀x. Marble x ⟶ MetamorphicRock x"  

```
###

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Strictly follow my instructions. 
You must define all predicates from the provided logical form during the consts creation process.
Be vigilant in maintaining consistency between declared constants and their usage in logical clauses. 
For instance, if ExtremeHeat :: "entity ⇒ bool" is declared, indicating that ExtremeHeat is a predicate relating to an entity, then in any axiomatic expressions involving ExtremeHeat, it should only be applied to entity variables such as x or y, and not to event variables like e. 
Words/Phrases that represent the same concept at different sentences, it should be unified into the same predicate-argument form.
Please only give me the answer with logical form for all the sentences below in the format used in the above example.
You must also define the quantifiers carefully. For example, existential quantifier '∃' means there exists at least one, and universal quantifier '∀' means for all.
You must include all the predicates-argument form from the provided logical form.

Provided sentences:
{explanatory_sentences}

Answer: