SYSTEM: You are an expert in Isabelle theorem prover, first-order logic and Davidsonian event semantics. 
You will be provided with a Hypothesis sentence with its corresponding logical form (first-order logic and davidsonian event semantics).
You will also be provided with Isabelle code in which the axioms are already written.
You need to transfer the logical form of Hypothesis sentence into Isabelle code after 'shows' and create the Isabelle code after 'assumes asm:' under the ```theorem hypothesis:``` part.
The logical form in assumes should be the context information that assumes to be true to prove the Hypothesis sentence, it is stated as premise to prove the Hypothesis sentence by axioms.
Some instructions:
1. Isabelle code use ∧, ∨, ∀, ∃, ¬, ⟷, ⟶ as logic symbols. Please write the code with these logic symbols.
2. Isabelle code utilises a non-bracketed format for its predicate-argument logical forms.
3. Isabelle code will use HOL session syntax. Commas and square brackets are not allowed.
4. The logical form in assumes should be the context information about entities mentioned in the Hypothesis sentence.
5. For all the predicates appeared in the code should have been defined as consts in the code.
6. Whenever there is a new variable (predicate) mentioned in the logical form, you must also define (add) it in the 'consts' part. Different morphological forms of a word should be defined as different consts.
7. The code you added must have the exact logical structure (including predicates, arguments, and variables) as represented in the provided logical form.
8. Do not write any proof steps between 'proof - end'. 
9. You should write the comments for (* Hypothesis:  *) for the code.
10. You should never modify the logical form of explanation sentence (axiomatization) in the provided code.
11. No brackets in the logical form (assume asm and shows) code.
12. All the existing quantifier or for all quantifier starts at the head of the logical code.
13. Please only give me the answer in triple brackticks as ``` ```.
14. The indentation is very import, it should have a same indentation as the examples does.
15. Give me the complete answer.
The code structure for theorem hypothesis is:
```
theorem hypothesis:
  assumes asm: [write the logical form of variables that are entities assumed to be true and required to prove the Hypothesis sentence, non-bracketed of the predicate-argument form]
  (* Hypothesis: [provided hypothesis sentence in natural language] *)
  shows [Transfer the logical form with quantifier of hypothesis sentence into isabelle code here, non-bracketed of the predicate-argument form]
proof -


qed

end
```
USER: Here are some examples:
###

Hypothesis Sentence: 
1. Extreme heat and pressure change rock into marble.
Logical form: ∀x y z e. ExtremeHeat(x) ∧ Pressure(y) ∧ Rock(z) ∧ Change(e) ∧ Agent(e, x) ∧ Agent(e, y) ∧ Patient(e, z) ⟶ Marble(z)

Provided code:

imports Main

begin
typedecl entity
typedecl event

consts
  ExtremeHeat :: "entity ⇒ bool"
  Pressure :: "entity ⇒ bool"
  Rock :: "entity ⇒ bool"
  Change :: "event ⇒ bool"
  Agent :: "event ⇒ entity ⇒ bool"
  Patient :: "event ⇒ entity ⇒ bool"
  Marble :: "entity ⇒ bool"
  MetamorphicRock :: "entity ⇒ bool"

(* Explanation 1: Extreme heat and pressure change rock into metamorphic rock. *)
axiomatization where
  explanation_1: "∀x y z. ExtremeHeat x ∧ Pressure y ∧ Rock z ⟶ (∃e. Change e ∧ Agent e x ∧ Agent e y ∧ Patient e z ∧ MetamorphicRock z)"

(* Explanation 2: Marble is a form of metamorphic rock. *)
axiomatization where
  explanation_2: "∀x. Marble x ⟶ MetamorphicRock x"

theorem hypothesis:
  assumes asm: 
  shows 
proof -


qed

end

Answer:
```
imports Main

begin

typedecl entity
typedecl event

consts
  ExtremeHeat :: "entity ⇒ bool"
  Pressure :: "entity ⇒ bool"
  Rock :: "entity ⇒ bool"
  Change :: "event ⇒ bool"
  Agent :: "event ⇒ entity ⇒ bool"
  Patient :: "event ⇒ entity ⇒ bool"
  Marble :: "entity ⇒ bool"
  MetamorphicRock :: "entity ⇒ bool"

(* Explanation 1: Extreme heat and pressure change rock into metamorphic rock. *)
axiomatization where
  explanation_1: "∀x y z. ExtremeHeat x ∧ Pressure y ∧ Rock z ⟶ (∃e. Change e ∧ Agent e x ∧ Agent e y ∧ Patient e z ∧ MetamorphicRock z)"

(* Explanation 2: Marble is a form of metamorphic rock. *)
axiomatization where
  explanation_2: "∀x. Marble x ⟶ MetamorphicRock x"

theorem hypothesis:
  assumes asm: "ExtremeHeat x ∧ Pressure y ∧ Rock z"
  (* Hypothesis: Extreme heat and pressure change rock into marble. *)
  shows "∃x y z e. ExtremeHeat x ∧ Pressure y ∧ Rock z ∧ Change e ∧ Agent e x ∧ Agent e y ∧ Patient e z ∧ Marble z"
proof -
  
qed

end
```
###

Hypothesis Sentence: 
1. Adult sponges produce gametes.
Logical form: ∀x y e. AdultSponges(x) ∧ Gametes(y) ∧ Produce(e) ∧ Agent(e, x) ∧ Patient(e, y)

Provided code:

imports Main

begin

typedecl entity
typedecl event

consts
  AdultSponges :: "entity ⇒ bool"
  Eggs :: "entity ⇒ bool"
  Sperm :: "entity ⇒ bool"
  Gametes :: "entity ⇒ bool"
  Produce :: "event ⇒ bool"
  Agent :: "event ⇒ entity ⇒ bool"
  Patient :: "event ⇒ entity ⇒ bool"

(* Explanation 1: Adult sponges produce eggs and sperm. *)
axiomatization where
  explanation_1: "∀x. AdultSponges x ⟶ (∃e y z. Eggs y ∧ Sperm z ∧ Produce e ∧ Agent e x ∧ Patient e y ∧ Patient e z)"

(* Explanation 2: Sperm and eggs are cells known as gametes. *)
axiomatization where
  explanation_2: "∀x y. Sperm x ∧ Eggs y ⟶ Gametes x ∧ Gametes y"

theorem hypothesis:
  assumes asm: 
  shows 
proof -


qed

end

Answer:
```
imports Main

begin

typedecl entity
typedecl event

consts
  AdultSponges :: "entity ⇒ bool"
  Eggs :: "entity ⇒ bool"
  Sperm :: "entity ⇒ bool"
  Gametes :: "entity ⇒ bool"
  Produce :: "event ⇒ bool"
  Agent :: "event ⇒ entity ⇒ bool"
  Patient :: "event ⇒ entity ⇒ bool"

(* Explanation 1: Adult sponges produce eggs and sperm. *)
axiomatization where
  explanation_1: "∀x. AdultSponges x ⟶ (∃e y z. Eggs y ∧ Sperm z ∧ Produce e ∧ Agent e x ∧ Patient e y ∧ Patient e z)"

(* Explanation 2: Sperm and eggs are cells known as gametes. *)
axiomatization where
  explanation_2: "∀x y. Sperm x ∧ Eggs y ⟶ Gametes x ∧ Gametes y"

theorem hypothesis:
  assumes asm: "AdultSponges x"
  (* Hypothesis: Adult sponges produce gametes. *)
  shows "∃x y e. AdultSponges x ∧ Gametes y ∧ Produce e ∧ Agent e x ∧ Patient e y"
proof -


qed

end

```
###


-------------------
Strictly follow my instructions. 
You must keep all consts existed before in the Provided code and add any new consts from the logical form of Hypothesis sentence.
Isabelle code after 'shows' must represents the exactly same logical form and information of the provided hypothesis sentence. You cannot change it.
The logical form after 'assumes' should be the context information (premise) that assumes to be true to prove the Hypothesis sentence but it cannot be as same as the hypothesis sentence.
The generated Isabelle code should not contain any commas in the code.
Please only give me the answer with logical form for all the sentences below in the format used in the above example.

Provided sentences:
{input_sentence}

Provided code:
{axiom_code}


Answer:

```
answer goes here(complete isabelle code)
```